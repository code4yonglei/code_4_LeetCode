/*Given an array of integers nums, sort the array in ascending order and return it.You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.Example 1:Input: nums = [5,2,3,1]Output: [1,2,3,5]Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).Example 2:Input: nums = [5,1,1,2,0,0]Output: [0,0,1,1,2,5]Explanation: Note that the values of nums are not necessairly unique.*/class Solution {public:    vector<int> sortArray(vector<int>& nums) {        sort(nums.begin(), nums.end());        return nums;    }};/*Method 1 (above):The shortest solution is to use inbuilt sort function.Expected Time Complexity: O(nlogn)Average Runtime: 147msMethod 2:Now talking about what leetcode wants, a.k.a, merge sort. The code below is standard merge sort.class Solution {public:    void merge(vector<int> &nums, int l, int m, int r){        int n1 = m + 1 - l, n2 = r - m;        vector<int> left(n1), right(n2);        for (int i = 0; i < n1; i++)            left[i] = nums[l + i];        for (int i = 0; i < n2; i++)            right[i] = nums[m + 1 + i];        int i = 0, j = 0, k = l;        while (i < n1 || j < n2)         {            if (j == n2 || i < n1 && left[i] < right[j])                nums[k++] = left[i++];            else                nums[k++] = right[j++];        }    }        void mergeSort(vector<int> &nums, int l, int r){        if(l >= r)            return;        int mid = (l + r) / 2;        mergeSort(nums, l, mid);        mergeSort(nums, mid + 1, r);        merge(nums, l, mid, r);    }        vector<int> sortArray(vector<int>& nums) {        mergeSort(nums, 0, nums.size() - 1);        return nums;    }};Expected Time Complexity: O(nlogn)Average Runtime: 730msMethod 3:Use a min-heap priority queue. Push all elements into this priority queue, when you sequentially pop elements from this queue they will be ordered in ascending order.class Solution {public:	vector<int> sortArray(vector<int>& nums) {		priority_queue<int, vector<int>, greater<int>> pq; //Min-Heap Priority Queue		for(int num : nums)            pq.push(num);		vector<int> ans;		while(!pq.empty())        {			ans.push_back(pq.top());			pq.pop();		}		return ans;	}};Expected Time Complexity: O(nlogn)Average Runtime: 185msMethod 4:If we think a little we observe that all the elements in the array will lie in between the max and min element in the array. Therefore we construct a frequency array to keep track of the elements we have and sequentially dequeue these elements from the freq vector to give us the final sorted array.class Solution {public:    vector<int> sortArray(vector<int>& nums) {        int mx = INT_MIN, mn = INT_MAX;        for(int i: nums)             mx = max(mx, i), mn = min(mn, i);        vector<int> freq(mx - mn + 2, 0), ans;        for(int num : nums)            freq[num - mn]++;        for(int i = 0; i < freq.size(); i++)            while(freq[i]--)                ans.push_back(i + mn);        return ans;    }};Expected Time Complexity: O(n)Average Runtime: 108ms*/